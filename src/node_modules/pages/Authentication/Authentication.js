import React, { useState, useEffect } from 'react';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
import "./Authentication.scss";
import Typography from '@material-ui/core/Typography';
import Link from '@material-ui/core/Link';
import { withRouter, Redirect } from "react-router-dom";
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";

import { projectDB, auth } from "firebaseConfig/firebaseConfig.js";
const useStyles = makeStyles({
  linkStyle: {
    fontSize: "16px",
    cursor: "pointer",
  }
})

const Authentication = (props) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [Exception, setException] = useState({
    isEx: false,
    exType: null,
  });

  const [userName, setUserNickName] = useState("");

  const { currentLang, isLogin, setIsLogin } = props;
  const classes = useStyles();
  const isRegistr = props.history.location.pathname === "/medium-clone/register";

  const linkHandler = (e) => {
    e.preventDefault();
    isRegistr
      ? props.history.push("/login")
      : props.history.push("/register");
  }
  const handleSubmit = (e) => {
    e.preventDefault();
    isRegistr
      ? createAccount()
      : loginAccount();
  }
  const createAccount = () => {
    if (!userName.trim()) {
      setException({
        isEx: true,
        exType: "noName",
      });
      return;
    }
    auth.createUserWithEmailAndPassword(email, password)
      .then(u => {
        projectDB.ref('users/' + u.user.uid).set({
          username: userName.trim(),
          userphoto: "",
          userbio: "Short user bio"
        });
        localStorage.setItem("currentUserId", u.user.uid);
      })
      .then(() => {
        setEmail("");
        setPassword("");
        setException({
          isEx: false,
          exType: "",
        });
        setIsLogin(true);
      })
      .catch(ex => {
        setException({
          isEx: true,
          exType: ex.code || ex,
        });
      })
  }
  const loginAccount = () => {
    auth.signInWithEmailAndPassword(email, password)
      .then(u => {
        localStorage.setItem("currentUserId", u.user.uid);
        setEmail("");
        setPassword("");
        setException({
          isEx: false,
          exType: "",
        });
        setIsLogin(true);
      })
      .catch(ex => {
        setException({
          isEx: true,
          exType: ex.code || ex,
        });
      });
  }
  const handleUserName = (e) => {
    if (e.target.value.length > 18) {
      e.preventDefault();
      return;
    }
    setUserNickName(e.target.value)
  }

  const ErrorMessage = () => {
    return (
      <div className="error-message" >
        {LangsTranslate[currentLang].Auth.form.exMessages[Exception.exType] || Exception.exType}
      </div>
    );
  }
  if (isLogin) {
    return <Redirect to="/medium-clone/" />
  }
  return (
    <div className="Authentication">
      <div className="Authentication__body">
        <Paper>
          <div className="Authentication__auth auth">
            <Typography variant="h4" component="h2">
              {isRegistr
                ? LangsTranslate[currentLang].Auth.title["title-regist"]
                : LangsTranslate[currentLang].Auth.title["title-sign"]}
            </Typography>
            <form onSubmit={handleSubmit} action="#" method="POST">
              <fieldset className="auth__field">
                <fieldset className="auth__email">
                  <TextField
                    type="email"
                    placeholder="your@gmail.com"
                    label={LangsTranslate[currentLang].Auth.form.email.label}
                    variant="filled"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                  />
                </fieldset>
                <fieldset className="auth__pass">
                  <TextField
                    type="password"
                    placeholder="password"
                    label={LangsTranslate[currentLang].Auth.form.password["label-enter"]}
                    variant="filled"
                    value={password}
                    onChange={e => setPassword(e.target.value)}
                    style={isRegistr
                      ? null
                      : { margin: "0px 0px 20px 0px" }}
                  />
                </fieldset>
                {isRegistr
                  ? <fieldset>
                    <TextField
                      type="text"
                      placeholder="username"
                      label={LangsTranslate[currentLang].Auth.form["user-name"]}
                      variant="filled"
                      value={userName}
                      onChange={handleUserName}
                      style={{ margin: "0px 0px 20px 0px" }}
                    />
                  </fieldset>
                  : null}
                {Exception.isEx && <ErrorMessage />}
                <Button
                  variant="contained"
                  color="primary"
                  type="submit">{isRegistr
                    ? LangsTranslate[currentLang].Auth.form.submitButton["reg"]
                    : LangsTranslate[currentLang].Auth.form.submitButton["sign"]}
                </Button>
              </fieldset>
            </form>
            <p><Link
              onClick={linkHandler}
              className={classes.linkStyle}
              color="primary">{isRegistr
                ? LangsTranslate[currentLang].Auth.form.LinkToLogin
                : LangsTranslate[currentLang].Auth.form.LinkToRegistration}</Link>
            </p>
          </div>
        </Paper>
      </div>
    </div >
  );
}

export default withRouter(Authentication);