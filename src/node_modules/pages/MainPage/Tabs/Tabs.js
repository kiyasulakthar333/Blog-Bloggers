import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { makeStyles } from '@material-ui/core/styles';
import AppBar from '@material-ui/core/AppBar';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import PersonPinIcon from '@material-ui/icons/PersonPin';
import GeneralFeed from "pages/MainPage/GeneralFeed/GeneralFeed.js";
import Box from '@material-ui/core/Box';
import Container from "@material-ui/core/Container";
import PublicIcon from '@material-ui/icons/Public';
import useMediaQuery from "@material-ui/core/useMediaQuery";
import ThumbDownIcon from '@material-ui/icons/ThumbDown';
import ThumbUpIcon from '@material-ui/icons/ThumbUp';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";

function TabPanel(props) {
  const { children, value, index, ...other } = props;
  const isMobile = useMediaQuery('(max-width:380px)');

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`scrollable-force-tabpanel-${index}`}
      aria-labelledby={`scrollable-force-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box style={isMobile ? { padding: 0 } : null} p={3}>
          {children}
        </Box>
      )}
    </div>
  );
}

TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.any.isRequired,
  value: PropTypes.any.isRequired,
};

function a11yProps(index) {
  return {
    id: `scrollable-force-tab-${index}`,
    'aria-controls': `scrollable-force-tabpanel-${index}`,
  };
}

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
    width: '100%',
    backgroundColor: theme.palette.background.paper,
  },
}));

export default function ScrollableTabsButtonForce({ currentLang, currentPage, searchByTagHandler, currentTag }) {
  const classes = useStyles();
  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const tagTab = useRef();
  useEffect(() => {
    if (!currentTag) return;
    tagTab.current.click();
  }, [currentTag])

  return (
    <Container style={{ maxWidth: "100%", padding: 0 }}>
      <div className={classes.root}>
        <AppBar position="static" color="default">
          <Tabs
            value={value}
            onChange={handleChange}
            variant="scrollable"
            scrollButtons="off"
            indicatorColor="primary"
            textColor="primary"
          >
            {currentPage === "mainPage" ?
              <Tab label={LangsTranslate[currentLang].Feeds.tabs["global-feed"]} icon={<PublicIcon />} {...a11yProps(0)} /> :
              <Tab label={LangsTranslate[currentLang].userPage.tabs["articles"]} icon={<PersonPinIcon />} {...a11yProps(0)} />}
            {currentPage === "mainPage" ?
              <Tab label={LangsTranslate[currentLang].Feeds.tabs["subscriptions"]} icon={<PersonPinIcon />} {...a11yProps(1)} /> :
              <Tab label={LangsTranslate[currentLang].userPage.tabs["liked"]} icon={<ThumbUpIcon />} {...a11yProps(1)} />}
            {currentPage === "mainPage" ?
              currentTag ?
                <Tab label={currentTag} ref={tagTab} onSuspend={() => this.onlick()} icon={<div style={{ fontSize: "16px", lineHeight: "19px" }}>#</div>} {...a11yProps(2)} /> :
                null :
              <Tab label={LangsTranslate[currentLang].userPage.tabs["disliked"]} icon={<ThumbDownIcon />} {...a11yProps(2)} />}
            {currentPage === "mainPage" ?
              null :
              currentTag ?
                <Tab label={currentTag} icon={<div style={{ fontSize: "16px", lineHeight: "19px" }}>#</div>} {...a11yProps(3)} /> :
                null}
          </Tabs>
        </AppBar>
        {[["global", "owns"], ["subs", "liked"], ["#" + currentTag, "disliked"], [null, "#" + currentTag]].map((e, index) => {
          const mainPageTab = e[0];
          const userPageTab = e[1];
          return (
            currentPage === "mainPage" ?
              mainPageTab ?
                <TabPanel key={index} value={value} index={index}>
                  <GeneralFeed
                    searchByTagHandler={searchByTagHandler}
                    tabName={mainPageTab}
                    currentLang={currentLang} />
                </TabPanel> :
                null :
              userPageTab ?
                <TabPanel key={index} value={value} index={index}>
                  <GeneralFeed
                    searchByTagHandler={searchByTagHandler}
                    tabName={userPageTab}
                    currentLang={currentLang} />
                </TabPanel> :
                null
          )
        })}
      </div>
    </Container >
  );
}