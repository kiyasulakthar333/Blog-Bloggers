import React, { useState, useEffect } from 'react';
import Feed from "components/Feed/Feed";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import Button from '@material-ui/core/Button';
import moment from 'moment';
import AddCircleIcon from '@material-ui/icons/AddCircle';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import Typography from "@material-ui/core/Typography";
import useMediaQuery from "@material-ui/core/useMediaQuery";
import Loader from "components/Loader/Loader.js";
import { withRouter } from "react-router-dom";

const GeneralFeed = ({ currentLang, searchByTagHandler, tabName, ...props }) => {
  const [articles, setArticles] = useState(null);
  const [isNoArticles, setIsNoArticles] = useState(false);
  const [articlesAmount, setArticlesAmount] = useState(3);
  const [isEnd, setIsEnd] = useState(false);

  const location = props.location.pathname;
  const isMobile = useMediaQuery('(max-width:381px)');

  const getArticlesInfo = (data) => {
    const articles = [];
    for (let article in data) {
      let articleOwnerId = "";
      for (let articleContent in data[article]) {
        if (
          articleContent !== "liked" &&
          articleContent !== "disliked" &&
          articleContent !== "comments"
        ) {
          articleOwnerId = articleContent
        }
      }
      articles.push({
        publishedDate: moment(new Date(+article)).format("DD.MM.YYYY"),
        key: article,
        comments: data[article].comments || {},
        liked: data[article].liked || {},
        disliked: data[article].disliked || {},
        articleOwnerId: articleOwnerId,
        articleText: data[article][articleOwnerId].articleText,
        articleTitle: data[article][articleOwnerId].articleTitle,
        articleDesc: data[article][articleOwnerId].articleDesc,
        articleTags: data[article][articleOwnerId].articleTags,
      });
    }
    return articles;
  }

  const deleteArticleHandler = (articleId, userId, articleTags) => {
    projectDB.ref(`articles/${articleId}`)
      .remove()
      .then(() => {
        return projectDB.ref(`users/${userId}/articlesref/${articleId}`)
          .remove()
      })
      .then(() => {
        return projectDB.ref(`users/${userId}/likedArticlesref/${articleId}`)
          .remove()
      })
      .then(() => {
        return projectDB.ref(`users/${userId}/dislikedArticlesref/${articleId}`)
          .remove()
      })
      .then(() => {
        articleTags.trim().split(" ").forEach((tag) => {
          projectDB.ref(`tags/${tag.substring(1)}/articlesref/${articleId}`)
            .remove();
        })
      })
      .then(() => {
        setArticles(articles => {
          return articles.filter(article => {
            if (article.key !== articleId) return article;
          })
        })
      })
  }

  const setGlobalArticles = () => {
    projectDB.ref('articles/').limitToLast(articlesAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      if (!data) {
        setIsNoArticles(true);
        return;
      }
      setIsEnd(snapshot.numChildren() < articlesAmount);
      setArticles(getArticlesInfo(data).reverse());
    })
  }
  const setHashtagArticles = (tag) => {
    projectDB.ref(`tags/${tag}/articlesref`).limitToLast(articlesAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      if (!data) {
        setIsNoArticles(true);
        setArticles(null);
        return
      }
      const articles = {};
      Object.keys(data).forEach(articleref => {
        projectDB.ref(`articles/${articleref}`).on('value', (snapshot) => {
          const data = snapshot.val();
          const article = Object.fromEntries([[articleref, data]]);
          Object.assign(articles, article);
        })
      })
      setIsEnd(Object.keys(articles).length < articlesAmount);
      if (data) setArticles(getArticlesInfo(articles).reverse());
      else setIsNoArticles(true);
    });
  }
  const setUserPageOwnerArticles = (userId, ref) => {
    projectDB.ref(`users/${userId}/${ref}`).limitToLast(articlesAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      if (!data) {
        setIsNoArticles(true);
        setArticles(null);
        return
      }
      const articles = {};
      Object.keys(data).forEach(articleref => {
        projectDB.ref(`articles/${articleref}`).on('value', (snapshot) => {
          const data = snapshot.val();
          const article = Object.fromEntries([[articleref, data]]);
          Object.assign(articles, article);
        })
      })
      setIsEnd(Object.keys(articles).length < articlesAmount);
      setArticles(getArticlesInfo(articles).reverse());
    });
  }
  const setSubsArticles = () => {
    const currUserId = localStorage.getItem("currentUserId");
    const articles = {}
    projectDB.ref(`users/${currUserId}/subscriptions`).on('value', (snapshot) => {
      const subscriptions = snapshot.val();
      if (!subscriptions) {
        setIsNoArticles(true);
        return;
      }

      const articlesRef = {};
      Object.values(subscriptions).forEach((userId) => {
        projectDB.ref(`users/${userId}/articlesref`).on('value', (snapshot) => {
          const data = snapshot.val();
          if (!data) return;

          Object.assign(articlesRef, data);

          const articlesRefArr = Object.keys(articlesRef);
          for (let i = 0; i < articlesAmount; i++) {
            if (!articlesRefArr[i]) break;
            projectDB.ref(`articles/${articlesRefArr[i]}`).on('value', (snapshot) => {
              const article = snapshot.val();
              if (!data) return;
              Object.assign(articles, { [articlesRefArr[i]]: article });
            })
          }

          setIsEnd(Object.keys(articles).length < articlesAmount);
          setArticles(getArticlesInfo(articles).reverse());
        })
      });
    });
  }

  useEffect(() => {
    if (tabName === "global") setGlobalArticles();
    else if (tabName[0] === "#") setHashtagArticles(tabName.substring(1));
    else if (tabName === "owns") setUserPageOwnerArticles(props.match.params.id, "articlesref");
    else if (tabName === "liked") setUserPageOwnerArticles(props.match.params.id, "likedArticlesref");
    else if (tabName === "disliked") setUserPageOwnerArticles(props.match.params.id, "dislikedArticlesref");
    else if (tabName === "subs") setSubsArticles();
    else setIsNoArticles(true);
  }, [articlesAmount, tabName, location]);

  useEffect(() => (() => setArticles(null)), []);

  return (
    <div style={{ display: "grid", gap: "15px" }}>
      {articles && articles.length !== 0 ?
        articles.map((article, index) => {
          return <Feed
            key={article.key}
            articleId={article.key}
            articleDesc={article.articleDesc}
            articleOwnerId={article.articleOwnerId}
            articleTags={article.articleTags}
            articleTitle={article.articleTitle}
            disliked={article.disliked}
            liked={article.liked}
            publishedDate={article.publishedDate}
            comments={article.comments}
            currentLang={currentLang}
            deleteArticleHandler={deleteArticleHandler}
            searchByTagHandler={searchByTagHandler}
          />
        }) : isNoArticles
          ? <div style={{ justifySelf: "center", margin: "10px 0px 10px 0px" }}>{LangsTranslate[currentLang].Feeds.info["no-articles"]}</div>
          : <div style={{ justifySelf: "center", margin: "10px 0px 10px 0px" }}><Loader color="primary" /></div>}
      {isEnd
        ? null
        : articles
          ? <Button
            variant="outlined"
            color="primary"
            style={{ justifySelf: "center" }}
            onClick={() => { setArticlesAmount(prev => prev + 3) }}
          ><AddCircleIcon color="primary" /></Button> : null}
    </div>
  );
}
export default withRouter(GeneralFeed);