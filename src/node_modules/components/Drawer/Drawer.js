import React from 'react';
import clsx from 'clsx';
import { makeStyles } from '@material-ui/core/styles';
import Drawer from '@material-ui/core/Drawer';
import Button from '@material-ui/core/Button';
import List from '@material-ui/core/List';
import Divider from '@material-ui/core/Divider';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import PostAddIcon from '@material-ui/icons/PostAdd';
import MenuIcon from '@material-ui/icons/Menu';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import ukPhoto from "LangsTranslate/uk.png";
import enPhoto from "LangsTranslate/en.jpg";
import NightsStayIcon from '@material-ui/icons/NightsStay';
import WbSunnyIcon from '@material-ui/icons/WbSunny';
import HomeIcon from '@material-ui/icons/Home';
import { NavLink } from "react-router-dom";
import Loader from "components/Loader/Loader.js";
import Avatar from '@material-ui/core/Avatar';
import ExitToAppIcon from '@material-ui/icons/ExitToApp';

const useStyles = makeStyles({
  list: {
    width: 250,
  },
  fullList: {
    width: 'auto',
  },
  buttonTextWhite: {
    color: "#fff",
    fontSize: "15px",
  },
  buttonTextDark: {
    color: "#000",
    fontSize: "15px",
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  }
});

export default function TemporaryDrawer({ toggleTheme, toggleLang, currentLang, isDarkTheme, userInfo }) {
  const classes = useStyles();
  const [state, setState] = React.useState({
    top: false,
    left: false,
    bottom: false,
    right: false,
  });

  const toggleDrawer = (anchor, open) => (event) => {
    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {
      return;
    }

    setState({ ...state, [anchor]: open });
  };

  const list = (anchor) => {
    const navBarText = LangsTranslate[currentLang].navbar;
    return (
      <div
        className={clsx(classes.list, {
          [classes.fullList]: anchor === 'top' || anchor === 'bottom',
        })}
        role="presentation"
        onClick={toggleDrawer(anchor, false)}
        onKeyDown={toggleDrawer(anchor, false)}
      >
        <List>
          <NavLink to="/medium-clone/" exact>
            <ListItem button className={isDarkTheme ? classes.buttonTextWhite : classes.buttonTextDark}>
              <ListItemIcon><HomeIcon /></ListItemIcon>
              <ListItemText primary={navBarText.home} />
            </ListItem>
          </NavLink>
          {!localStorage.getItem("currentUserId") &&
            <>
              <NavLink to="/medium-clone/login">
                <ListItem button className={isDarkTheme ? classes.buttonTextWhite : classes.buttonTextDark}>
                  <ListItemIcon><ExitToAppIcon /></ListItemIcon>
                  <ListItemText primary={navBarText["sign-in"]} />
                </ListItem>
              </NavLink>
              <NavLink to="/medium-clone/register">
                <ListItem button className={isDarkTheme ? classes.buttonTextWhite : classes.buttonTextDark}>
                  <ListItemIcon><ExitToAppIcon /></ListItemIcon>
                  <ListItemText primary={navBarText["sign-up"]} />
                </ListItem>
              </NavLink>
            </>
          }
          {localStorage.getItem("currentUserId") &&
            <>
              <NavLink to="/medium-clone/new">
                <ListItem button className={isDarkTheme ? classes.buttonTextWhite : classes.buttonTextDark}>
                  <ListItemIcon><PostAddIcon /></ListItemIcon>
                  <ListItemText primary={navBarText["new-post"]} />
                </ListItem>
              </NavLink>
              <NavLink to={`/medium-clone/profiles/${localStorage.getItem("currentUserId")}`}>
                <ListItem button className={isDarkTheme ? classes.buttonTextWhite : classes.buttonTextDark}>
                  {userInfo ?
                    <>
                      <ListItemIcon>
                        <Avatar style={{ width: "35px", height: "35px", margin: "0px 5px 0px 0px" }}>
                          {userInfo.photo ? <img className={classes.userPhoto} src={userInfo.photo} alt="" /> : null}
                        </Avatar>
                      </ListItemIcon>
                      <ListItemText primary={userInfo.name} />
                    </>
                    : <Loader />}
                </ListItem>
              </NavLink>
            </>
          }
        </List>
        <Divider />
        <List>
          <ListItem button onClick={toggleLang}>
            <ListItemIcon>{currentLang === "uk"
              ? <img style={{ width: "35px", opacity: "0.9" }} src={ukPhoto} alt="lang-photo" />
              : <img style={{ width: "35px", opacity: "0.9" }} src={enPhoto} alt="lang-photo" />}
            </ListItemIcon>
            <ListItemText primary={navBarText[currentLang + "-lang"]} />
          </ListItem>
          <ListItem button onClick={toggleTheme}>
            <ListItemIcon>{isDarkTheme ? <NightsStayIcon /> : <WbSunnyIcon />}</ListItemIcon>
            <ListItemText primary={navBarText["darkTheme-" + isDarkTheme]} />
          </ListItem>
        </List>
      </div>
    )
  };

  return (
    <div>
      {['top'].map((anchor) => (
        <React.Fragment key={anchor}>
          <Button onClick={toggleDrawer(anchor, true)} style={{
            borderRadius: "50%",
            minWidth: 0,
            padding: "7px",
            color: "#fff"
          }}>
            <MenuIcon />
          </Button>
          <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>
            {list(anchor)}
          </Drawer>
        </React.Fragment>
      ))}
    </div>
  );
}