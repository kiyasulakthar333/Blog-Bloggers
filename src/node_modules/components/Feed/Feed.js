import React, { useState, useEffect } from 'react';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import CardActions from '@material-ui/core/CardActions';
import Collapse from '@material-ui/core/Collapse';
import Avatar from '@material-ui/core/Avatar';
import IconButton from '@material-ui/core/IconButton';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import ThumbDownIcon from '@material-ui/icons/ThumbDown';
import ThumbUpIcon from '@material-ui/icons/ThumbUp';
import CommentIcon from '@material-ui/icons/Comment';
import { makeStyles } from '@material-ui/core/styles';
import Comments from "components/Comments/Comments.js";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import DeleteIcon from '@material-ui/icons/Delete';
import Statistic from "components/Statistic/Statistic.js";
import { NavLink } from "react-router-dom";
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import EditIcon from '@material-ui/icons/Edit';
import NotAuthAlert from 'components/NotAuthAlert/NotAuthAlert.js';

const useStyles = makeStyles({
  iconButtons: {
    borderRadius: "15px",
    border: "1px solid #88888880",
    margin: "0px 5px 0px 0px",
    padding: "7px"
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  },
  appraiselBlock: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap",
    rowGap: "10px"
  },
  linkStyle: {
    color: "#fff",
    "&:hover": {
      textDecoration: "underline"
    },
    "&:focus": {
      textDecoration: "underline"
    },
  },
});

export default function Feed(props) {
  const styles = useStyles();
  const {
    currentLang,
    articleDesc,
    articleTags,
    articleTitle,
    disliked,
    liked,
    publishedDate,
    articleId,
    comments,
    articleOwnerId,
    deleteArticleHandler,
    searchByTagHandler
  } = props;
  const [expanded, setExpanded] = useState(false);
  const [feedLiked, setFeedLiked] = useState(liked);
  const [feedDisliked, setFeedDisliked] = useState(disliked);
  const [feedComments, setFeedComments] = useState(comments);
  const [articleOwnerName, setArticleOwnerName] = useState("");
  const [articleOwnerPhoto, setArticleOwnerPhoto] = useState("");
  const [isAppraisalLoading, setIsAppraisalLoading] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const handleExpandClick = () => {
    setExpanded(!expanded);
  };

  const getUserNameById = (id) => {
    let name;
    projectDB.ref("users/" + id + "/username").on("value", (snapshot) => {
      name = snapshot.val();
      setArticleOwnerName(name);
    })
  }
  const getUserPhotoById = (id) => {
    let photo;
    projectDB.ref("users/" + id + "/userphoto").on("value", (snapshot) => {
      photo = snapshot.val();
      setArticleOwnerPhoto(photo);
    })
  }

  const likeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(feedLiked);
    const usersLiked = Object.values(feedLiked);
    if (usersLiked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersLiked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          setFeedLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      projectDB.ref(`users/${localStorage.getItem("currentUserId")}/likedArticlesref/${articleId}`)
        .remove();
      return;
    } else if (Object.values(feedDisliked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(feedDisliked)[Object.values(feedDisliked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setFeedLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setFeedDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false)
        });
      projectDB.ref(`users/${localStorage.getItem("currentUserId")}/dislikedArticlesref/${articleId}`)
        .remove()
        .then(() => {
          projectDB.ref(`users/${localStorage.getItem("currentUserId")}/likedArticlesref/${articleId}`)
            .set(+articleId);
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setFeedLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      });
    projectDB.ref(`users/${localStorage.getItem("currentUserId")}/likedArticlesref/${articleId}`)
      .set(+articleId);
  }

  const dislikeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(feedDisliked);
    const usersDisliked = Object.values(feedDisliked);
    if (usersDisliked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersDisliked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          setFeedDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      projectDB.ref(`users/${localStorage.getItem("currentUserId")}/dislikedArticlesref/${articleId}`)
        .remove();
      return;
    } else if (Object.values(feedLiked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(feedLiked)[Object.values(feedLiked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setFeedDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setFeedLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      projectDB.ref(`users/${localStorage.getItem("currentUserId")}/likedArticlesref/${articleId}`)
        .remove()
        .then(() => {
          projectDB.ref(`users/${localStorage.getItem("currentUserId")}/dislikedArticlesref/${articleId}`)
            .set(+articleId);
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "disliked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setFeedDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      });
    projectDB.ref(`users/${localStorage.getItem("currentUserId")}/dislikedArticlesref/${articleId}`)
      .set(+articleId);
  }

  useEffect(() => {
    getUserPhotoById(articleOwnerId);
    getUserNameById(articleOwnerId);
  }, [])

  return (
    <Card style={{ borderColor: "#888" }} variant="outlined">
      <CardHeader
        avatar={
          <Avatar>
            {articleOwnerPhoto ? <img className={styles.userPhoto} src={articleOwnerPhoto} alt="" /> : null}
          </Avatar>
        }
        action={
          <div style={{ margin: "15px 0px 0px 0px", display: "flex", flexWrap: "wrap", rowGap: "5px" }}>
            <NotAuthAlert currentLang={currentLang}>
              <IconButton
                aria-label="comments"
                onClick={handleExpandClick}
                aria-expanded={expanded}
                className={styles.iconButtons}
              >
                <CommentIcon style={{ margin: "0px 5px 0px 0px" }} />
                <span>{(Object.keys(feedComments).length).toLocaleString("en")}</span>
              </IconButton>
            </NotAuthAlert>
            <div style={{ display: "flex" }}>
              <NotAuthAlert currentLang={currentLang}>
                <IconButton
                  aria-label="likes"
                  className={styles.iconButtons}
                  onClick={likeHandler}
                  color={Object.values(feedLiked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
                  disabled={isAppraisalLoading}
                >
                  <ThumbUpIcon style={{ margin: "0px 5px 0px 0px" }} />
                  <span>{(Object.keys(feedLiked).length).toLocaleString("en")}</span>
                </IconButton>
              </NotAuthAlert>
              <NotAuthAlert currentLang={currentLang}>
                <IconButton
                  aria-label="dislikes"
                  className={styles.iconButtons}
                  onClick={dislikeHandler}
                  color={Object.values(feedDisliked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
                  disabled={isAppraisalLoading}
                >
                  <ThumbDownIcon style={{ margin: "0px 5px 0px 0px" }} />
                  <span>{(Object.keys(feedDisliked).length).toLocaleString("en")}</span>
                </IconButton>
              </NotAuthAlert>
            </div>
          </div>
        }
        style={{ flexWrap: "wrap", padding: "15px 15px 8px 15px" }}
        title={
          <NavLink className={styles.linkStyle} to={`/medium-clone/profiles/${articleOwnerId}`}>
            {articleOwnerName}
          </NavLink>
        }
        subheader={publishedDate}
      />
      <CardContent style={{ padding: "0px 16px 16px" }}>
        <Typography style={{ margin: "0px 0px 7px 0px" }} variant="h5" color="textPrimary" component="p">
          {articleTitle}
        </Typography>
        <Typography style={{ margin: "0px 0px 15px 0px" }} variant="body1" color="textSecondary" component="p">
          {articleDesc}
        </Typography>
        <div className={styles.appraiselBlock}>
          <div style={{ display: "flex", columnGap: "5px" }}>
            <NavLink tabIndex="-1" to={`/medium-clone/articles/${articleId}`}>
              <Button variant="outlined" >
                {LangsTranslate[currentLang].Feeds.feed["read"]}
              </Button>
            </NavLink>
            <Statistic type="article" liked={feedLiked} disliked={feedDisliked} currentLang={currentLang} />
          </div>
          {localStorage.getItem("currentUserId") === articleOwnerId ?
            <div>
              <NavLink tabIndex="-1" to={`/medium-clone/articles/${articleId}/edit`}>
                <IconButton
                  style={{ margin: 0 }}
                  aria-label="edit article"
                  className={styles.iconButtons}
                >
                  <EditIcon />
                </IconButton>
              </NavLink>
              <IconButton
                style={{ margin: "0px 0px 0px 5px" }}
                aria-label="delete article"
                className={styles.iconButtons}
                onClick={() => {
                  setIsDeleting(true);
                  deleteArticleHandler(articleId, articleOwnerId, articleTags)
                }}
                color={isDeleting ? "primary" : "default"}
              >
                <DeleteIcon />
              </IconButton>
            </div> :
            null}
        </div>
        <CardActions onClick={searchByTagHandler} style={{ display: "flex", flexWrap: "wrap", gap: "5px", padding: articleTags ? "10px 0px 0px" : '0px' }}>
          {articleTags ? articleTags.split(" ").map((tag, i) => {
            return <Button key={i} style={{ margin: "0" }} variant="contained" color="primary" size="small">{tag.substring(1)}</Button>
          }) : null}
        </CardActions>
      </CardContent>
      <Collapse in={expanded} timeout="auto" unmountOnExit>
        <CardContent style={{ padding: "15px" }}>
          <Comments
            feedComments={feedComments}
            setFeedComments={setFeedComments}
            articleId={articleId}
            currentLang={currentLang}
            articleOwnerId={articleOwnerId}
          />
        </CardContent>
      </Collapse>
    </Card >
  );
}
