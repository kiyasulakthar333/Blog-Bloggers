import React, { useRef, useEffect, useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import IconButton from '@material-ui/core/IconButton';
import SearchIcon from '@material-ui/icons/Search';
import Typography from '@material-ui/core/Typography';

const useStyles = makeStyles((theme) => ({
  form: {
    width: "100%",
    margin: "0px 0px 10px 0px",
    display: "flex",
    columnGap: "5px",
    alignItems: "center",
    "& > :first-child": {
      flexGrow: 1,
    }
  },
  textField: {
    "& > :first-child": {
      "& > :first-child": {
        padding: "10px"
      }
    }
  }
}));

export default function SearchTagForm({ currentLang, searchByTagHandler }) {
  const classes = useStyles();
  const [tag, setTag] = useState("");
  const [isError, setIsError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  const isTagCorrect = (tag) => {
    const searchTagsErrors = LangsTranslate[currentLang].tags.searchTagsErrors;
    if (tag.length === 0) return true;
    if (tag[0] !== "#") {
      setErrorMessage(searchTagsErrors.startWithHashTag);
      return false;
    }
    if (tag[0] === "#" && tag.length === 1) {
      setErrorMessage(searchTagsErrors.afterHashTagName);
      return false;
    }
    if (tag.split(" ").length > 1) {
      setErrorMessage(searchTagsErrors.onlyOneTag);
      return false;
    }
    if (!tag.substring(1).match(/^[a-zA-Zа-яА-Я0-9-_]+$/)) {
      setErrorMessage(searchTagsErrors.forbiddenSymbols);
      return false;
    }
    return true;
  }
  const tagTextHandler = (e) => {
    if (e.target.value.length > 18) {
      e.preventDefault();
      return;
    }
    setTag(e.target.value.trim());
  }
  const tagSearchSubmitHandler = (e) => {
    e.preventDefault();
    if (!tag) return;
    if (isTagCorrect(tag)) {
      searchByTagHandler(e, tag);
      return;
    }
  }
  useEffect(() => {
    if (!isTagCorrect(tag)) setIsError(true);
    else {
      setIsError(false);
      setErrorMessage("");
    }
  }, [tag])

  return (
    <>
      <form className={classes.form} onSubmit={tagSearchSubmitHandler} action="#" method="POST">
        <TextField
          label={LangsTranslate[currentLang].tags.searchByTagName}
          className={classes.textField}
          variant="outlined"
          onChange={tagTextHandler}
          value={tag}
          error={isError}
        />
        <IconButton
          aria-label="search tag"
          color="primary"
          type="submit"
        >
          <SearchIcon />
        </IconButton>
      </form>
      {errorMessage ?
        <Typography style={{ textAlign: "justify" }} variant="body1" color="error" component="div">
          {errorMessage}
        </Typography> :
        null}
    </>
  );
}
