import React, { useState, useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Button from '@material-ui/core/Button';
import Typography from '@material-ui/core/Typography';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import SearchTagForm from "components/TagsBar/SearchTagForm.js";
import Divider from '@material-ui/core/Divider';
import AddCircleIcon from '@material-ui/icons/AddCircle';
import Loader from "components/Loader/Loader.js";

const useStyles = makeStyles({
  root: {
    maxWidth: 275,
    minWidth: 275,
  },
  title: {
    fontSize: 14,
    marginTop: "5px"
  },
  tag: {
    margin: "0",
  },
  cardAction: {
    display: "flex",
    flexWrap: "wrap",
    gap: "5px",
    padding: "0px"
  },
  blockButton: {
    flexBasis: "100%",
    display: "flex",
    justifyContent: "center",
    margin: "0px !important",
    padding: "5px 0px 0px 0px"
  }
});

export default function TagsBar({ currentLang, isPlanshet, searchByTagHandler }) {
  const classes = useStyles();
  const [tags, setTags] = useState({});
  const [tagsAmount, setTagsAmount] = useState(8);
  const [isEnd, setIsEnd] = useState(false);
  const [isNoTags, setIsNoTags] = useState(false);

  useEffect(() => {
    projectDB.ref(`tags`).orderByChild('lastUses').limitToLast(tagsAmount).on('value', (snapshot) => {
      const data = snapshot.val();
      setIsEnd(snapshot.numChildren() < tagsAmount);
      if (data) setTags(data);
      else setIsNoTags(true);
    })
  }, [tagsAmount]);
  useEffect(() => (() => setTags(null)), []);

  return (
    <Card style={isPlanshet ? { margin: "20px 0px 0px 0px", maxWidth: "none" } : null} className={classes.root} variant="outlined">
      <CardContent>
        <SearchTagForm searchByTagHandler={searchByTagHandler} currentLang={currentLang} />
        <Divider />
        <Typography className={classes.title} color="textSecondary" gutterBottom>
          {LangsTranslate[currentLang].tags["recentUsedTags"]}
        </Typography>
        <CardActions onClick={searchByTagHandler} className={classes.cardAction}>
          {tags && Object.keys(tags).length !== 0 ?
            Object.keys(tags).reverse().map((tag) => {
              return (
                <Button
                  key={tag}
                  style={{ margin: "0" }}
                  variant="contained"
                  color="primary"
                  size="small"
                >{tag}</Button>
              )
            }) : isNoTags
              ? LangsTranslate[currentLang].tags["nobodyUsedTags"]
              : <Loader color="primary" />}
          {isEnd
            ? null
            : tags && Object.keys(tags).length !== 0
              ?
              <div className={classes.blockButton}>
                <Button
                  variant="outlined"
                  color="primary"
                  onClick={() => { setTagsAmount(prev => prev + 8) }}
                ><AddCircleIcon color="primary" /></Button>
              </div> :
              null}
        </CardActions>
      </CardContent>
    </Card >
  );
}
