import React, { useEffect, useState } from 'react';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardContent from '@material-ui/core/CardContent';
import Avatar from '@material-ui/core/Avatar';
import { NavLink } from "react-router-dom";
import IconButton from '@material-ui/core/IconButton';
import Typography from '@material-ui/core/Typography';
import ThumbDownIcon from '@material-ui/icons/ThumbDown';
import ThumbUpIcon from '@material-ui/icons/ThumbUp';
import { makeStyles } from '@material-ui/core/styles';
import { projectDB } from "firebaseConfig/firebaseConfig.js";
import moment from "moment";
import DeleteIcon from '@material-ui/icons/Delete';
import Statistic from "components/Statistic/Statistic.js";

const useStyles = makeStyles({
  iconButtons: {
    borderRadius: "15px",
    border: "1px solid #88888880",
    margin: "0px 5px 0px 0px",
    padding: "7px"
  },
  userPhoto: {
    objectFit: "cover",
    height: "100%",
    width: "100%",
    display: "block"
  },
  actionButtonsBlock: {
    display: "flex",
    alignItems: "center",
    columnGap: "5px",
    margin: "10px 0px 0px 0px",
    justifyContent: "space-between",
  },
  linkStyle: {
    color: "#fff",
    "&:hover": {
      textDecoration: "underline"
    },
    "&:focus": {
      textDecoration: "underline"
    },
  },
});

export default function Comment(props) {
  const {
    commentText,
    dislikes,
    likes,
    owner,
    publishedDate,
    articleId,
    deleteCommentHandler,
    articleOwnerId,
    currentLang } = props;
  const styles = useStyles();
  const [commentLiked, setCommentLiked] = useState(likes);
  const [commentDisliked, setCommentDisliked] = useState(dislikes);
  const [articleOwnerPhoto, setArticleOwnerPhoto] = useState("");
  const [articleOwnerName, setArticleOwnerName] = useState("");
  const [isAppraisalLoading, setIsAppraisalLoading] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const getUserNameById = (id) => {
    let name;
    projectDB.ref("users/" + id + "/username").on("value", (snapshot) => {
      name = snapshot.val();
      setArticleOwnerName(name)
    })
  }
  const getUserPhotoById = (id) => {
    let photo;
    projectDB.ref("users/" + id + "/userphoto").on("value", (snapshot) => {
      photo = snapshot.val();
      setArticleOwnerPhoto(photo);
    })
  }

  const likeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(commentLiked);
    const usersLiked = Object.values(commentLiked);
    if (usersLiked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersLiked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          setCommentLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    } else if (Object.values(commentDisliked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(commentDisliked)[Object.values(commentDisliked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "disliked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "liked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setCommentLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setCommentDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false)
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "liked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setCommentLiked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      })
  }

  const dislikeHandler = () => {
    setIsAppraisalLoading(true);
    const timestamp = Date.now();
    const likeTimestamp = Object.keys(commentDisliked);
    const usersDisliked = Object.values(commentDisliked);
    if (usersDisliked.find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = likeTimestamp[usersDisliked.indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "disliked/" + `${timestamp}/`)
        .remove()
        .then(() => {
          setCommentDisliked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    } else if (Object.values(commentLiked).find(e => e === localStorage.getItem("currentUserId"))) {
      const removebleTimestamp = Object.keys(commentLiked)[Object.values(commentLiked).indexOf(localStorage.getItem("currentUserId"))]
      projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "liked/" + `${removebleTimestamp}/`)
        .remove()
        .then(() => {
          return projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "disliked/" + `${timestamp}/`)
            .set(localStorage.getItem("currentUserId"))
        })
        .then(() => {
          setCommentDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
          setCommentLiked(prevState => {
            const newObj = {};
            for (let i in prevState) {
              if (i === removebleTimestamp) continue;
              newObj[i] = prevState[i];
            }
            return newObj;
          });
          setIsAppraisalLoading(false);
        });
      return;
    }
    projectDB.ref('articles/' + `${articleId}/` + "comments/" + `${publishedDate}/` + "disliked/" + `${timestamp}/`)
      .set(localStorage.getItem("currentUserId"))
      .then(() => {
        setCommentDisliked(prevState => ({ ...prevState, [timestamp]: localStorage.getItem("currentUserId") }));
        setIsAppraisalLoading(false);
      })
  }

  useEffect(() => {
    getUserPhotoById(owner);
    getUserNameById(owner);
  }, [])

  return (
    <Card variant="outlined">
      <CardHeader
        avatar={
          <Avatar>
            {articleOwnerPhoto ? <img className={styles.userPhoto} src={articleOwnerPhoto} alt="" /> : null}
          </Avatar>
        }
        action={
          <div style={{ margin: "15px 0px 0px 0px", display: "flex", flexWrap: "wrap", rowGap: "5px" }}>
            <IconButton
              aria-label="like"
              className={styles.iconButtons}
              onClick={likeHandler}
              disabled={isAppraisalLoading}
              color={Object.values(commentLiked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
            >
              <ThumbUpIcon style={{ margin: "0px 5px 0px 0px" }} />
              <span>{Object.keys(commentLiked).length}</span>
            </IconButton>
            <IconButton
              aria-label="dislike"
              className={styles.iconButtons}
              onClick={dislikeHandler}
              disabled={isAppraisalLoading}
              color={Object.values(commentDisliked).find(e => e === localStorage.getItem("currentUserId")) ? "primary" : "default"}
            >
              <ThumbDownIcon style={{ margin: "0px 5px 0px 0px" }} />
              <span>{Object.keys(commentDisliked).length}</span>
            </IconButton>
          </div>
        }
        style={{ flexWrap: "wrap", padding: "15px 15px 8px 15px" }}
        title={
          <NavLink className={styles.linkStyle} to={`/medium-clone/profiles/${owner}`}>
            {articleOwnerName}
          </NavLink>
        }
        subheader={moment(new Date(+publishedDate)).format("DD.MM.YYYY")}
      />
      <CardContent style={{ padding: "0px 16px 16px" }}>
        <Typography variant="body1" component="p">
          {commentText}
        </Typography>
        <div className={styles.actionButtonsBlock}>
          <Statistic type="comment" liked={commentLiked} disliked={commentDisliked} currentLang={currentLang} />
          {localStorage.getItem("currentUserId") === owner || localStorage.getItem("currentUserId") === articleOwnerId ?
            <IconButton
              style={{ margin: 0 }}
              aria-label="delete article"
              className={styles.iconButtons}
              component="span"
              onClick={() => {
                setIsDeleting(true);
                deleteCommentHandler(publishedDate);
              }}
              color={isDeleting ? "primary" : "default"}
            >
              <DeleteIcon />
            </IconButton> :
            null}
        </div>
      </CardContent>
    </Card>
  );
}
