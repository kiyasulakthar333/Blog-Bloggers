import React, { useState } from 'react';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import Typography from '@material-ui/core/Typography';
import DialogTitle from '@material-ui/core/DialogTitle';
import CancelIcon from '@material-ui/icons/Cancel';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles } from '@material-ui/core/styles';
import StatisticItem from "components/Statistic/StatisticItem.js";
import ThumbDownIcon from '@material-ui/icons/ThumbDown';
import ThumbUpIcon from '@material-ui/icons/ThumbUp';
import EqualizerIcon from '@material-ui/icons/Equalizer';
import LangsTranslate from "LangsTranslate/LangsTranslate.json";

const useStyles = makeStyles({
  statisticGrid: {
    display: "grid",
    gridTemplateColumns: "1fr 1fr",
    padding: "5px",
    "& > :first-child": {
      borderRight: "1px #888 solid"
    },
    "& > *": {
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    }
  },
  icons: {
    padding: '8px 8px 0px 8px',
  }
});

export default function Statistic({ currentLang, liked, disliked, type }) {
  const styles = useStyles();
  const [open, setOpen] = useState(false);
  const [scroll, setScroll] = useState('paper');
  const transStatistic = LangsTranslate[currentLang].Feeds.feed.statistic;
  const handleClickOpen = (scrollType) => () => {
    setOpen(true);
    setScroll(scrollType);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const descriptionElementRef = React.useRef(null);
  React.useEffect(() => {
    if (open) {
      const { current: descriptionElement } = descriptionElementRef;
      if (descriptionElement !== null) {
        descriptionElement.focus();
      }
    }
  }, [open]);

  return (
    <div>
      <Button variant="outlined" onClick={handleClickOpen('paper')} startIcon={<EqualizerIcon color="primary" style={{ margin: "0px 5px 0px 0px" }} />}>
        {transStatistic.statistic}
      </Button>
      <Dialog
        open={open}
        onClose={handleClose}
        scroll={scroll}
        aria-labelledby="scroll-dialog-title"
        aria-describedby="scroll-dialog-description"
      >
        <DialogTitle style={{ textAlign: "center" }} id="scroll-dialog-title">
          {transStatistic.statistic}
        </DialogTitle>
        <DialogContent className={styles.statisticGrid} dividers={scroll === 'paper'}>
          <div>
            <div className={styles.icons}>
              <ThumbUpIcon color="primary" />
            </div>
            {Object.keys(liked).length !== 0 ? Object.entries(liked).map(like => {
              return <StatisticItem key={like[0]} timestamp={like[0]} user={like[1]} />
            }) : type === "article" ?
              <Typography style={{ padding: "12px" }} variant="h6" color="textPrimary">
                {transStatistic.noOneLikedArticle}
              </Typography> :
              <Typography style={{ padding: "12px" }} variant="h6" color="textPrimary">
                {transStatistic.noOneLikedComment}
              </Typography>}
          </div>
          <div>
            <div className={styles.icons}>
              <ThumbDownIcon color="primary" />
            </div>
            {Object.keys(disliked).length !== 0 ? Object.entries(disliked).reverse().map(dislike => {
              return <StatisticItem key={dislike[0]} timestamp={dislike[0]} user={dislike[1]} />
            }) : type === "article" ?
              <Typography style={{ padding: "12px", wordBreak: "break-word" }} variant="h6" color="textPrimary">
                {transStatistic.noOneDislikedArticle}
              </Typography> :
              <Typography style={{ padding: "12px" }} variant="h6" color="textPrimary">
                {transStatistic.noOneDislikedComment}
              </Typography>}
          </div>
        </DialogContent>
        <DialogActions>
          <IconButton aria-label="cancel" onClick={handleClose} color="primary">
            <CancelIcon />
          </IconButton>
        </DialogActions>
      </Dialog>
    </div >
  );
}
